

/**
 * info panels
 *
 * key | panel
 *  1  |
 *  2  |
 *  3  |
 *  4  |
 *  5  |
 *  6  |
 *  7  |
 *  8  |
 *  9  |
 */


var customRoot
var btnarray = []
var pnlarray = []
var txtarray = []


var styleButton = ui.AddStyle("
^══╗
^ #║
^══╝")

var stylePanel = ui.AddStyle("
^╔═╗
^║#║
^╚═╝")




func mainInit()
// {
  ?totaltime = 1
  // {
    customRoot = ui.AddPanel()
    customRoot.anchor = "top_left"
    customRoot.dock= "top_left"
    customRoot.visible = false

    for i = 0..8
    // {
      var btn = ui.AddButton()
      buttonInit(btn, i)
      customRoot.Add(btn)
      btnarray.Add(btn)
      btn.SetPressed(buttonToggle(i))


      var pnl = ui.AddPanel()
      panelInit(pnl, i)
      customRoot.Add(pnl)
      pnlarray.Add(pnl)


      var txt = ui.AddText()
      textInit(txt, i)
      customRoot.Add(txt)
      txtarray.Add(txt)
    // }
  // }
// }




func buttonInit(button, id)
// {
  button.anchor = "top_left"
  button.dock = "top_left"

  button.x = 0
  button.y = (id * 3)

  button.w = 4
  button.h = 3

  button.text = "▶ "

  button.visible = true
  button.style = styleButton
// }




func panelInit(panel, id)
// {
  panel.anchor = "top_left"
  panel.dock = "top_left"

  panel.x = 4
  panel.y = 0

  panel.w = 4
  panel.h = 27

  panel.visible = false
  panel.style = stylePanel
// }




func textInit(text, id)
// {
  text.anchor = "top_left"
  text.dock = "top_left"

  text.x = 0
  text.y = (id * 3)

  var buttonBorder = "════"
  var buttonCornerTop = "╝"
  ?id = 0
    buttonCornerTop = "═"

  var buttonCornerBottom = "╗"
  ?id = 8
    buttonCornerBottom = "═"

  var n = "\n"
  var buttonContent = "  ▶  "


  text.text
^ = buttonBorder + buttonCornerTop + n
^ + buttonContent + n
^ + buttonBorder + buttonCornerBottom + n


  text.visible = false
// }




func buttonToggle(id)
// {
  pnlarray[id].visible = true
  txtarray[id].visible = true

  return
// }




func mainUpdate()
// {
  return
// }



/*
func printInfo(treasureCount, treasureLimit)
  var padding = "#"

  ? treasureCount < 10
    padding += "#"

  var str = ""
  str
  ^ = "\n" + "##┌-─-┐"
  ^ + "\n" + "##╞╤8╤╡"
  ^ + "\n" + "##└┴─┴┘"
  ^ + "\n" + padding
  ^ + treasureCount + "/" + treasureLimit

  var x = 1
  var y = 1
  var c = "#white"
  >`@x@,@y@,@c@,@str@
  /*`*

/**
  x = 1
  y = 7
  c = "#white"

  var foeArray
  foeArray = string.Split(foe, " ", false)

  var tempArray
  tempArray = string.Split(foe.name, " ", false)

  ? tempArray.Count() >= 2
    for i = 0..(tempArray.Count()-2)
      foeArray[i+2] = ""

  ? foeArray.Count() > 0
    foeArray[1] = string.Join(
    ^" ", tempArray, 0, tempArray.Count())

  str = "foe:"
  for element : foeArray
    ? !(string.Equals(element, ""))
      str += "\n##" + element

  >`@x@,@y@,@c@,@str@
  /*`*
/**
/**
  x = 1
  y = 7
  c = "#white"
  str = "foe:"

  var foeArray
  ? foe
    foeArray = string.Split(
    ^ foe, " " + foe.name + " ", false)

    foeArray.Insert(1, foe.name)

    ? foeArray[2]
      var temp
      temp = string.Split(foeArray[3], " ",
true)
      foeArray.RemoveAt(foeArray.Count()-1)


    for element : foeArray
      str += "\n##" + element

    ? temp
      for element : temp
        str += "\n##" + element

  >`@x@,@y@,@c@,@str@
  /*`*
/**


  x = 0
  y = 0
  str = "totaltime:" + "\n" + "pb:"

  >`@x@,@y@,@c@,@str@
  /*`*


  var strTotalTime
      strTotalTime
  ^ = time.FormatDigital(
  ^   totaltime, true) + "s"
  ^ + "#/#"
  ? totaltime < 1000
    strTotalTime += "#"
  ? totaltime < 100
    strTotalTime += "#"
  ? totaltime < 10
    strTotalTime += "#"
  strTotalTime += totaltime + "f"

  var strBestTime
      strBestTime
  ^ = time.FormatDigital(
  ^   loc.bestTime, true) + "s"
  ^ + "#/#"
  ? loc.bestTime < 1000
    strBestTime += "#"
  strBestTime += loc.bestTime + "f"

  str = strTotalTime + "\n" + strBestTime

  x = screen.w - string.Size(strBestTime)

  >`@x@,@y@,@c@,@str@
  /*`*

  x = 1
  y = screen.h - 4

  str = "item.left:##"

    ^ + item.left
    ^ + "\n"
    ^ + "item.right:#"
    ^ + item.right

  >`@x@,@y@,@c@,@str@
  /*`*
  return

*/
